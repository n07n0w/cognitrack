const { createClient } = require('@supabase/supabase-js');

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SUPABASE_URL –∏ SUPABASE_ANON_KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
async function checkSupabaseDatabase() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.error('   SUPABASE_URL:', supabaseUrl ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.error('   SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    process.exit(1);
  }

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...');
  console.log('üìç URL:', supabaseUrl);

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü—ã
    const tables = ['emotions', 'activities', 'mood_entries', 'gratitude_entries', 'mood_entry_activities'];
    
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü:');
    
    for (const tableName of tables) {
      try {
        const { data, error, count } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (error) {
          console.error(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, err.message);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
    
    const { data: emotions, error: emotionsError } = await supabase
      .from('emotions')
      .select('*');
    
    if (emotionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–π:', emotionsError.message);
    } else {
      console.log(`‚úÖ –≠–º–æ—Ü–∏–∏: ${emotions.length} –∑–∞–ø–∏—Å–µ–π`);
      if (emotions.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä—ã:', emotions.slice(0, 3).map(e => `${e.emoji} ${e.label}`).join(', '));
      }
    }

    const { data: activities, error: activitiesError } = await supabase
      .from('activities')
      .select('*');
    
    if (activitiesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', activitiesError.message);
    } else {
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activities.length} –∑–∞–ø–∏—Å–µ–π`);
      if (activities.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä—ã:', activities.slice(0, 3).map(a => `${a.icon} ${a.name}`).join(', '));
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const { data: moodEntries, error: moodError } = await supabase
      .from('mood_entries')
      .select('*')
      .limit(5);
    
    if (moodError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', moodError.message);
    } else {
      console.log(`‚úÖ –ó–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: ${moodEntries.length} –∑–∞–ø–∏—Å–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 5)`);
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    if (emotions.length === 0 || activities.length === 0) {
      console.log('\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow "Setup Supabase Database" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    } else {
      console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkSupabaseDatabase(); 